[alias]
	# # View the SHA, description, and history graph of the latest 20 commits
	# l = log --pretty=oneline -n 20 --graph
	# # View the current working tree status using the short format
	# s = status -s
	# # Show the diff between the latest commit and the current state
	# d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# # `git di $number` shows the diff between the state `$number` revisions ago and the current state
	# di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# # Pull in remote changes for the current repository and all its submodules
	# p = !"git pull; git submodule foreach git pull origin master"
	# # Clone a repository including all submodules
	# c = clone --recursive
	# # Commit all changes
	# ca = !git add -A && git commit -av
	# # Switch to a branch, creating it if necessary
	# go = checkout -B
	# # Show verbose output about tags, branches or remotes
	# tags = tag -l
	# branches = branch -a
	# remotes = remote -v
	# # Credit an author on the latest commit
	# credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# # Interactive rebase with the given number of latest commits
	# reb = "!r() { git rebase -i HEAD~$1; }; r"

	assume      = update-index --assume-unchanged
	assumeall   = "!git st -s | awk {'print $2'} | xargs git assume"
	assumed     = "!git ls-files -v | grep ^h | cut -c 3-"
	br          = branch
	ci          = commit
	cl          = clone
	co          = checkout
	cp          = cherry-pick
	dc          = diff --cached
	df          = diff
	diffr       = "!f() { git diff "$1"^.."$1"; }; f"
	dl          = "!git ll -1"
	dlc         = diff --cached HEAD^
	done        = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
	dr          = "!f() { git diff "$1"^.."$1"; }; f"
	ds          = diff --staged
	dump        = cat-file -p
	dw          = diff --word-diff
	dws         = diff --staged --word-diff
	f           = "!git ls-files | grep -i"
	fl          = log -u
	ft          = fetch
	gr          = grep -Ii
	gra         = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	grep        = grep -Ii
	hist        = log --color --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	ign         = ls-files -o -i --exclude-standard
	la          = "!git config -l | grep alias | cut -c 7-"
	lasttag     = describe --tags --abbrev=0
	lc          = "!f() { git ll "$1"^.."$1"; }; f"
	ld          = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	lds         = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	le          = log --oneline --decorate
	lg          = log --color --graph --pretty=format:'%C(yellow)%h%Creset %C(red bold)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lga         = log --color --graph --pretty=format:'%C(yellow)%h%Creset %C(red bold)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all
	ll          = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lnc         = log --pretty=format:"%h\\ %s\\ [%cn]"
	lol         = log --graph --decorate --pretty=oneline --abbrev-commit
	lola        = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ls          = ls-files
	lt          = describe --tags --abbrev=0
	ours        = "!f() { git checkout --ours $@ && git add $@; }; f"
	pull        = pull --ff-only
	r           = reset
	r1          = reset HEAD^
	r2          = reset HEAD^^
	rh          = reset --hard
	rh1         = reset HEAD^ --hard
	rh2         = reset HEAD^^ --hard
	sa          = stash apply
	sl          = stash list
	snapshot    = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	ss          = stash save
	st          = status -sb
	svnd        = svn dcommit
	svnl        = svn log --oneline --show-commit
	svnr        = svn rebase
	theirs      = "!f() { git checkout --theirs $@ && git add $@; }; f"
	type        = cat-file -t
	unassume    = update-index --no-assume-unchanged
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = fix,space-before-tab,trailing-space,cr-at-eol
	ignorecase = false
	autocrlf = input

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = green reverse bold
	local   = green bold
	remote  = yellow bold
[color "diff"]
	meta       = yellow bold
	frag       = magenta bold
	old        = red bold
	new        = green bold
	whitespace = red reverse
[color "status"]
	added     = green bold
	changed   = yellow bold
	untracked = red bold

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = p4merge
[mergetool]
	prompt = false
	keepBackup = true
[mergetool "meld"]
	cmd = meld
	trustExitCode = false
[mergetool "p4merge"]
	cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
	keepTemporaries = false
	trustExitCode = false
	keepBackup = false

[branch]
	autosetupmerge = true
# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = simple

# Diff
[diff]
	algorithm = patience
    tool = p4merge
[difftool]
	prompt = false
[difftool "p4merge"]
    cmd = "p4merge $LOCAL $REMOTE"
[difftool "meld"]
	cmd = meld

[github]
	user  = tunght13488
	token = 26ae3f727a63401c3901e588b1dcf075
[user]
	name = Ha The Tung
	email = tunght13488@gmail.com
